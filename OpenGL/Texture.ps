#version 400

in vec3 lightDir;
in vec2 texCoord;
in vec3 normal;
in vec3 viewDir;
in vec3 reflection;

out vec4 outputColor;

uniform sampler2D shaderTexture;
uniform vec4 diffuseLightColor;
uniform vec4 ambientLight;

void main(void){
	vec4 textureColor;
	vec4 color;
	float lightIntensity;

	//Sample the pixel color from the texture the sampler at this texture coordinate location.
	textureColor = texture(shaderTexture, texCoord);

	color = ambientLight;
	
	//Calculate the amount of light on this pixel.
	lightIntensity = clamp(dot(-lightDir, normal), 0.0f, 1.0f);

	vec3 r = normalize(reflection);
	vec3 v = normalize(viewDir);
	vec3 specular;

	//Check if the N dot L is greater than zero. 
	//If it is then add the diffuse color to the ambient color. 
	//If not then you need to be careful to not add the diffuse color. The reason being is that the diffuse color could be negative and it will subtract away some of the ambient color in the addition which is not correct.
	if(lightIntensity > 0.0f){
		//Determine the final diffuse color based on the diffuse color and the amount of light intensity.
		
		color += (diffuseLightColor * lightIntensity);
		specular.x = clamp(dot(r, -v), 0.0f, 1.0f);
		specular.y = clamp(dot(r, -v), 0.0f, 1.0f);
		specular.z = clamp(dot(r, -v), 0.0f, 1.0f);
		
		specular.x = pow(specular.x, 20.0f);
		specular.y = pow(specular.y, 20.0f);
		specular.z = pow(specular.z, 20.0f);
	}

	color += vec4(specular.xyz, 1.0f);
	color += clamp(color, 0.0f, 1.0f);	
	outputColor = color * textureColor;
}