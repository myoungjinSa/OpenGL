#version 400

in VS_OUT{
    vec3 V;
    vec2 UV;
    vec3 N;
    vec3 L;
} fs_in;

uniform sampler2D shaderTexture;

uniform float shininess = 16.0;
uniform float rimPower = 1.0;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 ambientColor;
uniform vec3 lightPosition;
uniform vec3 cameraPosition;

out vec4 out_color;

vec3 rimLight(vec3 N, vec3 V){
    vec3 rimColor = vec3(1.0, 1.0, 1.0);

    float f = 1.0 - dot(N, V);

    f = smoothstep(0.0, 1.0, f);

    f = pow(f, rimPower);

    return f * rimColor;
}

vec4 DirectLight(vec3 _normal, vec3 _lightDir, vec3 _viewDir){
    vec3 normal = normalize(_normal);
    vec3 lightDir = normalize(_lightDir);
    vec3 viewDir = normalize(_viewDir);

    float lambertian = max(dot(normal, lightDir), 0.0);
    vec3 specular = vec3(0.0, 0.0, 0.0);
    if(0.0 < lambertian){
        vec3 reflection = reflect(-lightDir, normal);
        specular = pow(max(dot(reflection, viewDir), 0.0), shininess) * specularColor;
    }
    vec3 diffuse = lambertian * diffuseColor;
    return vec4(diffuse + specular + ambientColor, 1.0);
}

//vec4 SpotLight(vec3 _normal, vec3 _lightDir, vec3 _viewDir){    
//    float outerCone = 0.9f;
//    float innerCone = 0.95f;
//
//    vec3 normal = normalize(_normal);
//    vec3 lightDir = normalize(_lightDir);
// 
//    vec3 specular = vec3(0.0f, 0.0f, 0.0f);
//    float lambertian = max(dot(normal, lightDir), 0.0);
//    if(0.0 < lambertian){
//        vec3 viewDir = normalize(cameraPosition - _viewDir);
//        vec3 halfwayDir = normalize(viewDir + lightDir);
//        float specAmount = pow(max(dot(normal, halfwayDir), 0.0f), shininess);
//        specular = specAmount * specularColor;
//    }
//
//    float angle = dot(vec3(0.0f, -1.0f, 0.0f), -lightDir);
//    float intensity = clamp((angle - outerCone) / (innerCone - outerCone), 0.0f, 1.0f);
//    vec4 lightColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);
//    return vec4(lambertian * intensity * ambientColor, 1.0f) + vec4(specular * intensity, 1.0f) * lightColor;
//}

void main(){
    vec4 textureColor = texture(shaderTexture, fs_in.UV);
    out_color = DirectLight(fs_in.N, fs_in.L, fs_in.V) * textureColor ;
}