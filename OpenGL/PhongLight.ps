#version 400

in VS_OUT{
    vec3 V;
    vec2 UV;
    vec3 N;
    vec3 L;
} fs_in;

uniform sampler2D shaderTexture;

uniform float shininess = 16.0;
uniform float rimPower = 1.0;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 ambientColor;
uniform vec3 lightPosition;

out vec4 out_color;

vec3 rimLight(vec3 N, vec3 V){
    vec3 rimColor = vec3(1.0, 1.0, 1.0);

    float f = 1.0 - dot(N, V);

    f = smoothstep(0.0, 1.0, f);

    f = pow(f, rimPower);

    return f * rimColor;
}


void main(){
    vec3 normal = fs_in.N;
    vec3 lightDir = fs_in.L;
    vec3 viewDir = fs_in.V;

    float lambertian = max(dot(normal, lightDir), 0.0);
    float specular = 0.0;
    if(0.0 < lambertian){
        vec3 reflection = reflect(-lightDir, normal);        
        float specAngle = max(dot(reflection, viewDir), 0.0);
        specular = pow(specAngle, shininess);
    }

    vec4 textureColor = texture(shaderTexture, fs_in.UV);
    vec3 diffuse = lambertian * diffuseColor;
    out_color = vec4(diffuse + specularColor * specular + ambientColor, 1.0) * textureColor;
}